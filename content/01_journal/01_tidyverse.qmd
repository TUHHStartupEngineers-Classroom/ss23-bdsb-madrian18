---
title: "Tidyverse"
author: "Muhammad Adrian"
---

# Introduction to tidyverse

In this section, process of importing data to visualizing data is acquired. The core concepts in the packages dplyr and ggplot2, which are parts of the tidyverse are introduced. These packages work together as part of larger data analysis pipeline. 


# Challenge

## Challenge 1

Analyze the sales by location (state) with a bar plot. Which state has the highest revenue? 

## Challenge 2

Analyze the sales by location and year.

# Source Code

```{r}
# Data Science at TUHH ------------------------------------------------------
# SALES ANALYSIS ----

# 1.0 Load libraries ----

library(tidyverse)
library(dplyr)

# Excel Files
library(readxl)

# 2.0 Importing Files ----

bikes_tbl      <- read_excel(path = "../../00_data/01_raw_data/bikes.xlsx")

orderlines_tbl <- read_excel("../../00_data/01_raw_data/orderlines.xlsx")

# Not necessary for this analysis
bikeshops_tbl  <- read_excel("../../00_data/01_raw_data/bikeshops.xlsx")

# 3.0 Examining Data ----

# Method 1: Print it to the console
orderlines_tbl

# Method 2: Clicking on the file in the environment tab

# Method 3: glimpse() function. 
glimpse(orderlines_tbl)

# 4.0 Joining Data ----

# Left join 
left_join(orderlines_tbl, bikes_tbl, by = c("product.id" = "bike.id"))

# Chaining commands with the pipe and assigning it to order_items_joined_tbl
bike_orderlines_joined_tbl <- orderlines_tbl %>%
  left_join(bikes_tbl, by = c("product.id" = "bike.id")) %>%
  left_join(bikeshops_tbl, by = c("customer.id" = "bikeshop.id"))

# Examine the results with glimpse()
bike_orderlines_joined_tbl %>% glimpse()

# 5.0 Wrangling Data ----
# All actions are chained with the pipe already. Perform each step separately and use glimpse() or View() to validate code. Store the result in a variable at the end of the steps.
bike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>%
  # 5.1 Separate category name
  separate(col    = category,
           into   = c("category.1", "category.2", "category.3"),
           sep    = " - ") %>%
  
  # 5.1.1 Separate location 
  separate(col    = location,
           into   = c("city", "state"),
           sep    = ", ") %>%
  
  # 5.2 Add the total price (price * quantity) 
  # Add a column to a tibble that uses a formula-style calculation of other columns
  mutate(total.price = price * quantity) %>%
  
  # 5.3 Optional: Reorganize. Using select to grab or remove unnecessary columns
  # 5.3.1 by exact column name
  select(-...1, -gender) %>%
  
  # 5.3.2 by a pattern
  # Select_helpers to define patterns. 
  # Type ?ends_with and click on Select helpers in the documentation
  select(-ends_with(".id")) %>%
  
  # 5.3.3 Need the column "order.id". Let's bind it back to the data
  bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>% 
  
  # 5.3.4 Reorder the data by selecting the columns in your desired order.
  # Select_helpers like contains() or everything()
  select(order.id, contains("order"), contains("model"), contains("category"),
         city, state, price, quantity, total.price,
         everything()) %>%
  
  # 5.4 Rename columns to have underscores instead of the dots
  # (one at the time vs. multiple at once)
  rename(bikeshop = name) %>%
  set_names(names(.) %>% str_replace_all("\\.", "_"))

```

# Result - Business Insights

## Sales by Year
```{r}
# 6.0 Business Insights ----
# 6.1 Sales by Year ----
library(lubridate)
library(dplyr)

# Step 1 - Manipulate

sales_by_year_tbl <- bike_orderlines_wrangled_tbl %>%
  
  # Select columns
  select(order_date, total_price) %>%
  # Add year column
  mutate(year = year(order_date)) %>%
  # Grouping by year and summarizing sales
  group_by(year) %>% 
  summarize(sales = sum(total_price)) %>%
  
  # Optional: Add a column that turns the numbers into a currency format 
  # mutate(sales_text = scales::dollar(sales)) <- Works for dollar values
  mutate(sales_text = scales::dollar(sales, big.mark = ".", 
                                     decimal.mark = ",", 
                                     prefix = "", 
                                     suffix = " €"))

sales_by_year_tbl  
  
# Step 2 - Visualize

library(ggplot2)
sales_by_year_tbl %>%
  
  # Setup canvas with the columns year (x-axis) and sales (y-axis)
  ggplot(aes(x = year, y = sales)) +
  
  # Geometries
  geom_col(fill = "#2DC6D6") + # Use geom_col for a bar plot
  geom_label(aes(label = sales_text)) + # Adding labels to the bars
  geom_smooth(method = "lm", se = FALSE) + # Adding a trendline

  # Formatting
  # scale_y_continuous(labels = scales::dollar) + # Change the y-axis. 
  # Adjust to euro values
  scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  labs(
    title    = "Revenue by year",
    subtitle = "Upward Trend",
    x = "", # Override defaults for x and y
    y = "Revenue"
  )
```

## Sales by Year and Category
```{r}
# 6.2 Sales by Year and Category ----
library(lubridate)
library(dplyr)
library(ggplot2)
# Step 1 - Manipulate
sales_by_year_cat_1_tbl <- bike_orderlines_wrangled_tbl %>%

  # Select columns and add a year
  select(order_date, total_price, category_1) %>%
  mutate(year = year(order_date)) %>%
  
  # Group by and summarize year and main category
  group_by(year, category_1) %>%
  summarise(sales = sum(total_price)) %>%
  ungroup() %>%
  
  # Format $ Text
  mutate(sales_text = scales::dollar(sales, big.mark = ".", 
                                     decimal.mark = ",", 
                                     prefix = "", 
                                     suffix = " €"))

sales_by_year_cat_1_tbl  
# Step 2 - Visualize
sales_by_year_cat_1_tbl %>%
  
  # Set up x, y, fill
  ggplot(aes(x = year, y = sales, fill = category_1)) +
  
  # Geometries
  geom_col() + # Run up to here to get a stacked bar plot
  geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
  
  # Facet
  facet_wrap(~ category_1) +
  
  # Formatting
  scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  labs(
    title = "Revenue by year and main category",
    subtitle = "Each product category has an upward trend",
    fill = "Main category" # Changes the legend name
  )
```

## Sales by Location
```{r}
# 6.3 Sales by Location ----
library(lubridate)
library(dplyr)
library(ggplot2)

# Step 1 - Manipulate
sales_by_loc_tbl <- bike_orderlines_wrangled_tbl %>%
  
  # Select columns and add a year
  select(order_date, total_price, state) %>%
  mutate(year = year(order_date)) %>%
  
  # Group by and summarize year and main catgegory
  group_by(state) %>%
  summarise(sales = sum(total_price)) %>%
  #ungroup() %>%
  
  # Format $ Text
  mutate(sales_text = scales::dollar(sales, big.mark = ".", 
                                     decimal.mark = ",", 
                                     prefix = "", 
                                     suffix = " €"))

sales_by_loc_tbl
```
```{r plot1, fig.width=14, fig.height=10}
# Step 2 - Visualize
library(dplyr)
library(ggplot2)
library(tidyverse)
library(lubridate)

sales_by_loc_tbl %>%
  
  # Setup canvas with the columns year (x-axis) and sales (y-axis)
  ggplot(aes(x = state, y = sales)) +
  
  # Geometries
  geom_col(fill = "#2DC6D6") + # Use geom_col for a bar plot
  geom_label(aes(label = sales_text)) + # Adding labels to the bars
  geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
  
  # Formatting
  # scale_y_continuous(labels = scales::dollar) + # Change the y-axis. 
  # Adjust to euro values
  scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  labs(
    title    = "Revenue by year",
    x = "", # Override defaults for x and y
    y = "Revenue"
  ) + 
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```

## Sales by Year and Location
```{r}
# 6.4 Sales by Year and Location ----
library(dplyr)

# Step 1 - Manipulate
sales_by_year_loc_tbl <- bike_orderlines_wrangled_tbl %>%
  
  # Select columns and add a year
  select(order_date, total_price, state) %>%
  mutate(year = year(order_date)) %>%
  
  # Group by and summarize year and main category
  group_by(year, state) %>%
  summarise(sales = sum(total_price)) %>%
  ungroup() %>%
  
  # Format $ Text
  mutate(sales_text = scales::dollar(sales, big.mark = ".", 
                                     decimal.mark = ",", 
                                     prefix = "", 
                                     suffix = " €"))

sales_by_year_loc_tbl  
```
```{r plot2, fig.width = 10, fig.height = 7}
library(dplyr)
library(ggplot2)
library(lubridate)
# Step 2 - Visualize
sales_by_year_loc_tbl %>%
  
  # Set up x, y, fill
  ggplot(aes(x = year, y = sales, fill = state)) +
  
  # Geometries
  geom_col() + # Run up to here to get a stacked bar plot
  geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
  
  # Facet
  facet_wrap(~ state) +
  
  # Formatting
  scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  labs(
    title = "Revenue by year and state",
    #subtitle = "Each product category has an upward trend",
    fill = "State" # Changes the legend name
  ) +
theme(
  axis.text.x = element_text(angle = 45, hjust = 1)
)
```

## Writing Files
```{r}
# 7.0 Writing Files ----
library(tidyverse)

# 7.1 Excel ----

library("writexl")
bike_orderlines_wrangled_tbl %>%
  write_xlsx("../../00_data/01_bike_sales/02_wrangled_data/bike_orderlines.xlsx")

# 7.2 CSV ----
bike_orderlines_wrangled_tbl %>% 
  write_csv("../../00_data/01_bike_sales/02_wrangled_data/bike_orderlines.csv")

# 7.3 RDS ----
bike_orderlines_wrangled_tbl %>% 
  write_rds("../../00_data/01_bike_sales/02_wrangled_data/bike_orderlines.rds")

```
